<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:custom="clr-namespace:SyncPlayWPF.CustomControls"
    xmlns:dataconverters="clr-namespace:SyncPlayWPF.Converters">

    <!-- Dataconverters -->
    <dataconverters:TextBoxValueToBoolean x:Key="TextBoxValueToBoolean"/>

    <!-- Images-->
    <BitmapImage x:Key="MinimizeButton" UriSource="/ImageLib/minus-line.png"/>
    <BitmapImage x:Key="CloseWindowButton" UriSource="/ImageLib/close-line.png"/>
    <BitmapImage x:Key="RestoreWindowButton" UriSource="/ImageLib/restore-window-line.png"/>
    <BitmapImage x:Key="SyncPlayLogoNew" UriSource="/ImageLib/SyncplayOriginal_NewLogo.png"/>
    <BitmapImage x:Key="SyncPlayLogoClassic" UriSource="/ImageLib/SyncplayOriginal_Logo.png"/>
    <BitmapImage x:Key="NewSessionBackDrop" UriSource="/ImageLib/NewSessionBackDrop.png"/>
    <BitmapImage x:Key="GithubOctocat" UriSource="/ImageLib/github-octocat.png"/>
    <BitmapImage x:Key="TwitterBird" UriSource="/ImageLib/twitter_logo.png"/>
    <BitmapImage x:Key="WebsiteLogo" UriSource="/ImageLib/url_icon.png"/>

    <!-- Colors -->
    <SolidColorBrush x:Key="DarkMode_AccentColorA" Color="#2B2B2B"/>
    <SolidColorBrush x:Key="DarkMode_AccentColorB" Color="#A6878787"/>
    <SolidColorBrush x:Key="DarkMode_AccentColorC" Color="#3B3B3B"/>
    <SolidColorBrush x:Key="DarkMode_AccentColorD" Color="#9E2B2B2B"/>
    <SolidColorBrush x:Key="DarkMode_AccentColorE" Color="#FF676767"/>
    
    <SolidColorBrush x:Key="DarkMode_TextColorA" Color="#C8C8C8"/>
    <SolidColorBrush x:Key="DarkMode_TextColorB" Color="#E1C6C6C6"/>
    <SolidColorBrush x:Key="DarkMode_TextColorC" Color="#68AAAAAA"/>
    <SolidColorBrush x:Key="DarkMode_TextColorD" Color="#515151"/>
    <SolidColorBrush x:Key="DarkMode_TextColorDHover" Color="#747474"/>
    
    <SolidColorBrush x:Key="DarkMode_ImageButtonImgHover" Color="#CBCBCB"/>
    <SolidColorBrush x:Key="DarkMode_ImageButtonImgClick" Color="#A3D5EC"/>
    <SolidColorBrush x:Key="DarkMode_ImageButtonHover" Color="#595959"/>
    <SolidColorBrush x:Key="DarkMode_ImageButtonClick" Color="#769AAB"/>


    <LinearGradientBrush x:Key="DarkMode_ContrastedGradient">
        <GradientStop Color="#ffc206" Offset="0"/>
        <GradientStop Color="#ff5f41" Offset="0.5"/>
        <GradientStop Color="#ff1e67" Offset="1"/>
        <LinearGradientBrush.Transform>
            <RotateTransform Angle="45"/>
        </LinearGradientBrush.Transform>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DarkMode_ContrastedHoverGradient">
        <GradientStop Color="#FFCD34" Offset="0"/>
        <GradientStop Color="#FF846D" Offset="0.5"/>
        <GradientStop Color="#FF4F88" Offset="1"/>
        <LinearGradientBrush.Transform>
            <RotateTransform Angle="45"/>
        </LinearGradientBrush.Transform>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DarkMode_ContrastedClickGradient">
        <GradientStop Color="#FFDB6D" Offset="0"/>
        <GradientStop Color="#FFBFB3" Offset="0.5"/>
        <GradientStop Color="#FFA3C1" Offset="1"/>
        <LinearGradientBrush.Transform>
            <RotateTransform Angle="45"/>
        </LinearGradientBrush.Transform>
    </LinearGradientBrush>


    <!-- Stylez -->
    <Style x:Key="DarkMode_TitleBarText" TargetType="Label">
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="FontFamily" Value="Open Sans"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{StaticResource DarkMode_TextColorA}"/>
    </Style>

    <!-- Control templates -->
    


    <!-- Custom Controls and Styles -->

    <!-- Image buttons-->
    <Style TargetType="{x:Type custom:ImageButton}" x:Key="TitleBarButtons" BasedOn="{StaticResource {x:Type custom:ImageButton}}">
        <Setter Property="ImageHeight" Value="15"/>
        <Setter Property="ImageWidth" Value="15"/>
        <Setter Property="ImageBackgroundBrush" Value="{StaticResource DarkMode_AccentColorB}"/>
        <Setter Property="BackgroundHoverBrush" Value="{StaticResource DarkMode_ImageButtonHover}"/>
        <Setter Property="BackgroundClickBrush" Value="{StaticResource DarkMode_ImageButtonClick}"/>
        <Setter Property="ImageBackgroundHoverBrush" Value="{StaticResource DarkMode_ImageButtonImgHover}"/>
        <Setter Property="ImageBackgroundClickBrush" Value="{StaticResource DarkMode_ImageButtonImgClick}"/>
        <Setter Property="BackgroundBrush" Value="Transparent"/>
    </Style>
    <Style TargetType="{x:Type custom:ImageButton}">
        <Setter Property="Background" Value="{StaticResource DarkMode_AccentColorA}"/>
        <Setter Property="ImageHeight" Value="18"/>
        <Setter Property="ImageWidth" Value="18"/>
        <Setter Property="MinWidth" Value="32.5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <!-- The control template consists of only one rectangle within a
                    border. The border will change its color as well with the hover and onclick
                    events. The rectangle will contain the actual logo. -->
                    <Border
                        Name="MainBorder"
                        Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Width}"
                        Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Height}">

                        <Rectangle 
                            Name="ImageRec"
                            Width="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageHeight}" 
                            Height="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageWidth}">
                            <Rectangle.OpacityMask>
                                <ImageBrush Stretch="Uniform" ImageSource="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Image}"/>
                            </Rectangle.OpacityMask>

                            <!-- Style triggers for the on hover and is clicking events -->
                            <Rectangle.Style>
                                <Style TargetType="{x:Type Rectangle}">
                                    <Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageBackgroundBrush}"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="True">
                                            <Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageBackgroundClickBrush}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ElementName=MainBorder, Path=IsMouseOver}" Value="True">
                                            <Setter Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageBackgroundHoverBrush}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Rectangle.Style>

                        </Rectangle>

                        <!-- Style triggers for the on hover and is clicking events -->
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BackgroundBrush}"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="True">
                                        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BackgroundClickBrush}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding ElementName=MainBorder, Path=IsMouseOver}" Value="True">
                                        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BackgroundHoverBrush}"/>
                                    </DataTrigger>

                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
    <Style TargetType="{x:Type custom:ImageButton}" x:Key="ImageSilhouette">
        <Setter Property="ImageWidth" Value="25"/>
        <Setter Property="ImageHeight" Value="25"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="ImageBackgroundBrush" Value="{StaticResource DarkMode_AccentColorA}"/>
        <Setter Property="ImageBackgroundHoverBrush" Value="{StaticResource DarkMode_AccentColorC}"/>
        <Setter Property="ImageBackgroundClickBrush" Value="{StaticResource DarkMode_AccentColorD}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type custom:ImageButton}">
                    <Border
                        Height="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ImageHeight}"
                        Width="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=ImageWidth}">
                        <Border.OpacityMask>
                            <ImageBrush
                                ImageSource="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Image}"
                                Stretch="Uniform"
                                RenderOptions.BitmapScalingMode="HighQuality"/>
                        </Border.OpacityMask>
                        <Border.Effect>
                            <DropShadowEffect
                                BlurRadius="10"
                                ShadowDepth="1"/>
                        </Border.Effect>
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageBackgroundBrush}"/>
                                <Style.Triggers>
                                    
                                    <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="True">
                                        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageBackgroundHoverBrush}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="True">
                                        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=ImageBackgroundClickBrush}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Normal Button -->
    <Style TargetType="{x:Type Button}" x:Key="SignificantActionButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border 
                        Name="MainBorder"
                        CornerRadius="15"
                        Height="30">
                        <Border.Effect>
                            <DropShadowEffect BlurRadius="15" ShadowDepth="0" Opacity="0.5"/>
                        </Border.Effect>
                        <TextBlock 
                            VerticalAlignment="Center"
                            HorizontalAlignment="Center"
                            FontWeight="DemiBold"
                            Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"/>
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="Background" Value="{StaticResource DarkMode_ContrastedGradient}"/>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="{StaticResource DarkMode_ContrastedHoverGradient}"/>
                                    </Trigger>
                                    <DataTrigger Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="True">
                                        <Setter Property="Background" Value="{StaticResource DarkMode_ContrastedClickGradient}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="SignificantSecondaryActionButton">
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border 
                        Name="MainBorder"
                        CornerRadius="15"
                        Height="30">
                        <Border.Effect>
                            <DropShadowEffect BlurRadius="6" ShadowDepth="0" Opacity="1"/>
                        </Border.Effect>
                        <TextBlock
                            x:Name="ButtonLabel"
                            VerticalAlignment="Center"
                            HorizontalAlignment="Center"
                            FontWeight="DemiBold"
                            
                            Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="Foreground" Value="{StaticResource DarkMode_ContrastedGradient}"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="True">
                                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="True">
                                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Foreground}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <Border.Style>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="BorderBrush" Value="{StaticResource DarkMode_ContrastedGradient}"/>
                                <Setter Property="BorderThickness" Value="1"/>
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="{StaticResource DarkMode_ContrastedHoverGradient}"/>
                                        <Setter Property="BorderThickness" Value="0"/>
                                    </Trigger>
                                    <DataTrigger Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="True">
                                        <Setter Property="Background" Value="{StaticResource DarkMode_ContrastedClickGradient}"/>
                                        <Setter Property="BorderThickness" Value="0"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Border.Style>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- Link Button -->
    <Style TargetType="{x:Type custom:LinkButton}" x:Key="LinkButton">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type custom:LinkButton}">
                    <Border
                        x:Name="ContainerBorder">
                        <TextBlock 
                            Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" 
                            HorizontalAlignment="Center" 
                            TextDecorations="Underline">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Setter Property="Foreground" Value="{StaticResource DarkMode_TextColorD}"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=IsMouseOver}" Value="True">
                                            <Setter Property="Foreground" Value="{StaticResource DarkMode_TextColorDHover}"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Prompting Labels -->
    <Style TargetType="{x:Type custom:PromptingLabel}">

        <Setter Property="Focusable" Value="False"/>
        <Setter Property="FocusedUnderlineBrush" Value="{StaticResource DarkMode_AccentColorB}"/>
        <Setter Property="HoverUnderlineBrush" Value="{StaticResource DarkMode_AccentColorE}"/>
        <Setter Property="Template">
            
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type custom:PromptingLabel}">
                    <Grid Margin="3,6,3,6">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="23"/>
                            <RowDefinition Height="auto"/>
                        </Grid.RowDefinitions>
                        <TextBox
                            Margin="10,0,0,0"
                            Grid.Row="0"
                            BorderThickness="0"
                            FontSize="13"
                            Name="UserInputBox"
                            Background="Transparent"
                            Foreground="{StaticResource DarkMode_TextColorB}"
                            Text="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Text}">
                            
                        </TextBox>
                        <TextBlock 
                            Grid.Row="0"
                            Margin="10,0,0,0"
                            FontSize="13"
                            IsHitTestVisible="False"
                            Focusable="False"
                            FontWeight="Normal"
                            Foreground="{StaticResource DarkMode_TextColorC}"
                            Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PromptingText}">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=UserInputBox, Path=Text, Converter={StaticResource TextBoxValueToBoolean}}" Value="True">
                                            <Setter Property="Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ElementName=UserInputBox, Path=IsFocused}" Value="True">
                                            <Setter Property="Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <Border 
                            SnapsToDevicePixels="True"
                            Name="Underline"
                            Grid.Row="1"
                            BorderThickness="0">
                            <Border.Style>
                                <Style TargetType="{x:Type Border}">
                                    <Setter Property="Background" Value="{StaticResource DarkMode_AccentColorC}"/>
                                    <Setter Property="Height" Value="1"/>
                                    <Setter Property="Margin" Value="0,1,0,0"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=UserInputBox, Path=IsMouseOver}" Value="True">
                                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HoverUnderlineBrush}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ElementName=UserInputBox, Path=IsFocused}" Value="True">
                                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedUnderlineBrush}"/>
                                            <Setter Property="Height" Value="2"/>
                                            <Setter Property="Margin" Value="0,0,0,0"/>
                                        </DataTrigger>
                                        
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type custom:PromptingPasswordBox}">

        <Setter Property="Focusable" Value="False"/>
        <Setter Property="FocusedUnderlineBrush" Value="{StaticResource DarkMode_AccentColorB}"/>
        <Setter Property="HoverUnderlineBrush" Value="{StaticResource DarkMode_AccentColorE}"/>
        <Setter Property="Template">

            <Setter.Value>
                <ControlTemplate TargetType="{x:Type custom:PromptingPasswordBox}">
                    <Grid Margin="3,6,3,6">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="23"/>
                            <RowDefinition Height="auto"/>
                        </Grid.RowDefinitions>
                        <PasswordBox
                            Margin="10,0,0,0"
                            Grid.Row="0"
                            BorderThickness="0"
                            FontSize="13"
                            Name="UserInputBox"
                            Background="Transparent"
                            Foreground="{StaticResource DarkMode_TextColorB}">
                        </PasswordBox>
                        <TextBlock 
                            Grid.Row="0"
                            Margin="10,0,0,0"
                            FontSize="13"
                            IsHitTestVisible="False"
                            Focusable="False"
                            FontWeight="Normal"
                            Foreground="{StaticResource DarkMode_TextColorC}"
                            Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=PromptingText}">
                            <TextBlock.Style>
                                <Style TargetType="{x:Type TextBlock}">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=FieldCompleted}" Value="True">
                                            <Setter Property="Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ElementName=UserInputBox, Path=IsFocused}" Value="True">
                                            <Setter Property="Visibility" Value="Hidden"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </TextBlock.Style>
                        </TextBlock>
                        <Border 
                            SnapsToDevicePixels="True"
                            Name="Underline"
                            Grid.Row="1"
                            BorderThickness="0">
                            <Border.Style>
                                <Style TargetType="{x:Type Border}">
                                    <Setter Property="Background" Value="{StaticResource DarkMode_AccentColorC}"/>
                                    <Setter Property="Height" Value="1"/>
                                    <Setter Property="Margin" Value="0,1,0,0"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=UserInputBox, Path=IsMouseOver}" Value="True">
                                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=HoverUnderlineBrush}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding ElementName=UserInputBox, Path=IsFocused}" Value="True">
                                            <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=FocusedUnderlineBrush}"/>
                                            <Setter Property="Height" Value="2"/>
                                            <Setter Property="Margin" Value="0,0,0,0"/>
                                        </DataTrigger>

                                    </Style.Triggers>
                                </Style>
                            </Border.Style>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--<Style TargetType="{x:Type local:PromptingPasswordBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:PromptingPasswordBox}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>-->
</ResourceDictionary>
